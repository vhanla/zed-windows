name: Build and Release Zed for Windows (Stable)

on:
  schedule:
    - cron: '0 */3 * * *'
  workflow_dispatch:
    inputs:
      manual_release:
        description: "Force a manual release"
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.version_check.outputs.ref }}
      build_flag: ${{ steps.version_check.outputs.build_flag }}
    steps:
      - name: Version check
        id: version_check
        run: |
          zed_url="https://api.github.com/repos/zed-industries/zed/releases"
          this_url="https://api.github.com/repos/${{ github.repository }}/releases"

          echo "Fetching latest stable release from Zed..."
          latest_stable_zed="$(curl -sL ${zed_url} | jq -r '[.[] | select(.prerelease == false)][0].tag_name')"
          echo "Latest stable version: ${latest_stable_zed}"
          
          echo "Checking published versions..."
          curl -sL ${this_url} | jq -r '.[].tag_name' > published_versions

          if ! grep -Fxq "${latest_stable_zed}" published_versions ; then
            echo "New version detected: ${latest_stable_zed}"
            echo "ref=${latest_stable_zed}" >> $GITHUB_OUTPUT
            echo "build_flag=true" >> $GITHUB_OUTPUT
          else
            echo "Version ${latest_stable_zed} already published"
            echo "build_flag=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: windows-latest
    needs: [check]
    if: ${{ needs.check.outputs.build_flag == 'true' || github.event.inputs.manual_release == 'true' }}
    strategy:
      matrix:
        build_type: [vulkan, opengl]
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Enable long paths in Windows
        shell: pwsh
        run: |
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force
          git config --global core.longpaths true

      - name: Install Visual Studio components
        uses: microsoft/setup-msbuild@v1
        with:
          vs-version: '[17.0,18.0)'
          vs-prerelease: false
          components: |
            Microsoft.VisualStudio.Component.CoreEditor
            Microsoft.VisualStudio.Workload.CoreEditor
            Microsoft.VisualStudio.Component.VC.Tools.x86.x64
            Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions.CMake
            Microsoft.VisualStudio.Component.VC.CMake.Project
            Microsoft.VisualStudio.Component.Windows11SDK.26100
            Microsoft.VisualStudio.Component.VC.Runtimes.x86.x64.Spectre

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2.4
        with:
          sdk-version: 20348

      - name: Checkout Zed
        uses: actions/checkout@v4
        with:
          repository: zed-industries/zed
          ref: ${{ needs.check.outputs.latest_release }}
          path: zed

      - name: Install rust nightly
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          override: true
          target: wasm32-wasip1

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.backend }}
          workspaces: "zed -> target"
          
      - name: Create .cargo/config.toml
        shell: pwsh
        run: |
          mkdir -p .cargo
          @"
          [target.'cfg(all())']
          rustflags = ["--cfg", "${{ matrix.build_type }}"]
          "@ | Out-File -FilePath .cargo/config.toml -Encoding utf8

      - name: Set UCRT environment
        shell: pwsh
        run: |
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $env:GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-windows-static" >> $env:GITHUB_ENV
          echo "VCPKG_LIBRARY_LINKAGE=static" >> $env:GITHUB_ENV

      - name: Build (${{ matrix.build_type }})
        working-directory: zed
        shell: pwsh
        env:
          RUSTFLAGS: "-C symbol-mangling-version=v0 --cfg tokio_unstable --cfg windows_slim_errors -C target-feature=+crt-static"
          ZED_UPDATE_EXPLANATION: "Auto-updater disabled (vhanla/zed-windows)"
          ZED_RC_TOOLKIT_PATH: "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.20348.0\\x64"
          VCPKGRS_DYNAMIC: 0
        run: |
          $env:VCPKG_ROOT = "$env:VCPKG_INSTALLATION_ROOT"
          cargo clean
          cargo build --release --verbose
          if (-not (Test-Path ./target/release/zed.exe)) { exit 1 }

      - name: Compress artifacts
        working-directory: zed/target/release
        shell: pwsh
        run: |
          $version = "${{ needs.check.outputs.latest_release }}".TrimStart('v')
          $prefix = "zed-${{ matrix.build_type }}_$version"
          Compress-Archive -Path zed.exe, zed.pdb -DestinationPath "$prefix.zip"

      - name: Generate checksums
        working-directory: zed/target/release
        shell: bash
        run: |
          version="${{ needs.check.outputs.latest_release }}"
          prefix="zed-${{ matrix.build_type }}_${version#v}"
          sha256sum "$prefix.zip" > "$prefix.zip.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zed-${{ matrix.build_type }}
          path: |
            zed/target/release/zed-*.zip
            zed/target/release/zed-*.sha256

      - name: Extract version
        id: extract_version
        shell: bash
        run: |
          version="${latest_release#v}"
          echo "version=$version" >> $GITHUB_OUTPUT

  release:
    needs: [check, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir release_assets
          find artifacts -type f \( -name "*.zip" -o -name "*.sha256" \) -exec cp {} release_assets/ \;

      - name: Generate release notes
        run: |
          version="${{ needs.check.outputs.latest_release }}"
          body=$(curl -s "https://api.github.com/repos/zed-industries/zed/releases/tags/$version" | jq -r .body)
        
          echo "## Zed $version Windows Build" > CHANGELOG.md
          echo -e "\n$body" >> CHANGELOG.md
          echo -e "\n---\n**Windows Build Details**" >> CHANGELOG.md
          echo -e "- Built using GitHub Actions\n- Includes both Vulkan and OpenGL backends\n- SHA256 checksums provided for verification" >> CHANGELOG.md
          echo -e "\nSee [official Zed release notes](https://github.com/zed-industries/zed/releases/tag/$version) for full details." >> CHANGELOG.md

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check.outputs.latest_release }}
          name: "Zed ${{ needs.check.outputs.latest_release }} (Windows)"
          body_path: CHANGELOG.md
          files: |
            release_assets/*
          draft: false
          prerelease: ${{ contains(needs.check.outputs.latest_release, '-') }}
          make_latest: true
